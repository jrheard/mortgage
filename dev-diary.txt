2/7/16

spun up a simple little clojure sandbox to play around with mortgage math
so i can wrap my head around this stuff a bit better.

i've mainly been doing this because i wanted to try out intellij+cursive, which i'm liking
a lot so far. i've got to memorize a ton of keyboard shortcuts, but it seems like a very
powerful environment, and it's easy to keep it minimal. its vim integration is fantastic,
it even has splits!

right now i've got some functions/schemas that encode mortgages and do simple math.

questions i currently want this program to answer:

* given several mortgages, tell me which one's "best"
* how should i reason about paying off a 30-year in 15 years, vs
    paying it off in 30 years and investing the extra money in the stock market?
* say i want to sell my house in 9 years (for instance). how does that affect
    which mortgage is best? do i want to have paid it off aggressively or slowly?

i'm thinking about converting the project to clojurescript and spinning up a simple
reagent-powered UI with sliders/etc for interest rates/etc. not for any particularly good
reason other than just wanting to see how cursive plays with clojurescript. might try
that tomorrow.

====

2/8/16

given several mortgages, tell me which is best:

(apply min-key :total
     (map total-price-breakdown some-mortgages))

hrm, need to get in the habit of taking notes here. forgot about this file all day,
maybe i should try using tabs in cursive.

smoy and avinson talked me out of pursuing the pay-off-in-30-and-invest-the-difference thing,
so i'm poking around and trying to figure out how to convert this project to cljs.

converting a clj project to cljs is pretty fiddly business, involves a lot of handmade edits
to project.clj. best method seems to be to do `lein new figwheel blat` and copy over large
portions of its project.clj and its whole resources/public/index.html.

had some trouble getting cursive to deal with the cljs conversion - looks like it doesn't
currently support that thing where you don't need to :require-macros if the library
follows certain naming patterns. added :require-macros in the meantime to deal
with it.

https://github.com/cursive-ide/cursive/issues/775

currently it looks like things are working pretty well, except i'm having a bit of trouble
with the cljs repl - when i do cmd-shift-l to load core.cljs, the repl doesn't change
its ns to mortgage.core, it stays at cljs.user, and so i get "Use of undeclared Var
cljs/user.Mortgage" when i try to cmd-shift-p something, etc etc. (in-ns 'mortgage.core)
fixes it, but i need to research this more and see if there's a way to do this automatically.

haven't converted any of the java-specific stuff (Math/pow, etc) to js, need to do that.

====

2/9/16

well, it looks like the cljs conversion completely worked yesterday, i didn't need to do anything
today. both java and js have a Math/pow, which is hilarious, so i didn't need to change that.
playing around with mortgage.core in the repl seems to work fine.

re: switching to the namespace of the file i load, it looks like i might need to just handle
namespace-switching manually - there's a tools->repl->etc thing that i can add a keyboard shortcut
for, so i'll just do that if it ends up being an issue.

gonna try editor tabs - configured cmd-shift-, for prev tab, cmd-shift-. for next tab

setting up reagent, copy-pasting a lot of stuff from cljstone :/

ok, reagent was relatively easy to set up. i'm able to display a list of mortgages on the page.

now, how best to display them? what's a good charting library?

https://keminglabs.com/c2/ - heard about this before, but seems abandoned
https://natasha.codes/highcharts-clojurescript-om/
http://annekjohnson.com/blog/2014/10/using-clojurescript-to-make-charts-with-raphael/ - ignore
https://github.com/quil/quil ?

====

2/10/16

yeah, c2 seems abandoned, gonna look into quil.
whimsical readme, evokes _why

vaguely curious about how to use quil and reagent together, or if i should just one of them,
if i want to do that binding of isaac clone - saving these links for later

- https://stackoverflow.com/questions/33345084/quil-sketch-on-a-reagent-canvas

hm, clojurians-log.mantike.pro/clojurescript/2016-01-21.html might indicate that i should be
using svg directly instead of quil/etc.

i guess the current ui i have in mind - i should write that down - doesn't take much mouse input...

so what i have in mind is that there are a few independent variables:

house price
interest rate
down payment percentage
loan duration

and really only two main dependent variables that i care about:

money thrown away (total sum of interest payments over lifetime of mortgage)
total monthly payment (incl taxes+insurance)

so really i'd just like to get straight to drawing those on a screen. it doesn't seem like
there's a particularly good library for this if c2 is abandoned; quil doesn't seem very relevant,
although i'm going to keep reading about it and maybe dig through its source code for fun.

quick note for boi clone from that irc log above:
"I think common wisdom is that SVG is easier, but canvas has much better performance"

anyway i'm gonna stick with svg for this dumb little project. never used it before though,
so i'll have to do some reading about wtf it is and how to use it

some more quil notes while i process all these tabs i opened:
quil has a "functional mode" described in https://nvbn.github.io/2015/05/28/svg-animation/,
is pretty imperative/processing-y otherwise though, i prob wouldn't like working with it

quil.info/sketches/show/example_nanoscopic pretty cool quil demo

- https://nvbn.github.io/2015/05/28/svg-animation/ - svg with om (not reagent)
^ ok this shit is gold, will be super useful for isaac

- documentup.com/aaronc/freactive# exists, might be useful for animations, looks very alpha though

- https://github.com/pleasetrythisathome/bardo maybe useful for animations in boi

ok, enough quil, svg notes:
- www.webdesignerdepot.com/2015/01/the-ultimate-guide-to-svg/ - article is pretty fluffy but has tons of links
lol jesus christ that's a lot of links

svg animation:
- https://davidwalsh.name/svg-animation
something called smil comes up in a few of these links, apparently it's dead?
- https://css-tricks.com/guide-svg-animations-smil/
- https://css-tricks.com/smil-is-dead-long-live-smil-a-guide-to-alternatives-to-smil-features/ in case i care about this
- programming-enchiladas.destructuring-bind.org

what is raphael, is it good, do i want to use it in cljs?
https://maurits.wordpress.com/2012/02/13/first-clojurescript-experiences-using-raphael/ says
"here is lots of room for improvement in the code. My first idea was to make it more DSL like, using macros.
But then again, SVG is already kind of a DSL, so it would probably make more sense to let the code output
SVG directly instead of using RaphaÃ«l as an extra layer."o
so i probably don't want to use raphael.

ok that's enough, i should just start digging through https://css-tricks.com/using-svg/ and then write reagent
code that emits svg elements directly, doesn't look like i need to use any libraries.

ok that was garbage, trying https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial now

lol the end result of all this for this particular mortgage project will be that i did a jillion tabs' worth
of research just to learn how to use the <rect> element, but this'll come in handy if i decide to make
a BoI clone

see also https://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html#overview

TODO i should really read through the flappy-bird demo in https://github.com/bhauman/lein-figwheel, see what he does

svg element reverence https://developer.mozilla.org/en-US/docs/Web/SVG/Element

"The globally valid rule for SVG files is, that later elements are rendered atop previous elements.
The further down an element is the more will be visible."

- https://msdn.microsoft.com/en-us/library/gg193983(v=vs.85).aspx#Using_Canvas_AndOr_SVG
great article on choosing between canvas and svg
(most of today's notes have little relation to the mortgage project and are more about a possible BOI clone)

====

2/11/16

i might need to end up reading a textbook on linear algebra sometime. i don't get matrices at all.

took a while to wrap my head around the rotate() thing in svg.

regular: +x to east, +y to south
rotated 90: +x to south, +y to west
rotated 180: +x to west, +y to north
rotated 270: +x to north, +y to east

got the bar graph's bars pointing in the right direction. next steps:

* hover behavior - when you mouse over a bar (or a <tr>):
  * draw the bar in orange
  * draw the $ value on the bar in cool-looking text
  * highlight the relevant <tr>

* generate a ton of mortgages, from 400k-700k; have one pair of graphs for 30-years, another pair for 15-years. one big table though.

made a lot of progress on hover behavior, all three of those sub-asterisks are done.
having trouble with one thing, though - when you hover over a bar, if you hover over its associated text, a selection-end event fires.
this is because the <text> isn't a child of the <rect>, it's just a separate shape that happens to be drawn on top of it.
i'm not sure what the best way of solving that problem is. apparently svg has some container elements, but none of them was
immediately clear to me. i cheated by just drawing a background rect and having selection-end events fire when *it's* moused over.
